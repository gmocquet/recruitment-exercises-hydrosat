---
description:
globs:
alwaysApply: true
---
---
description: Appliquer le principe ISP (Interface Segregation Principle)
globs: ["src/**/*.py"]
alwaysApply: true
---

- Apply the **Interface Segregation Principle (ISP)**:
  - Prefer multiple **small and specific** interfaces over one large, general interface.
  - No class should be forced to implement methods that it **doesn't actually use**.
  - Use Python's **ABC (Abstract Base Class)** or **Protocol** from the typing module to define interfaces.
  - This helps better respect **SRP** and **OCP**, and reduces coupling.

üí° Example (ISP Violation):
```python
from abc import ABC, abstractmethod

class Worker(ABC):
    @abstractmethod
    def work(self):
        pass

    @abstractmethod
    def eat(self):
        pass

class Robot(Worker):
    def work(self):
        # Implementation works fine
        pass

    def eat(self):
        raise NotImplementedError("Robots don't eat")  # ‚ùå ISP violated
```

üí° Example (ISP Done Right):
```python
from abc import ABC, abstractmethod

class Workable(ABC):
    @abstractmethod
    def work(self):
        pass

class Eatable(ABC):
    @abstractmethod
    def eat(self):
        pass

class Human(Workable, Eatable):
    def work(self):
        # Implementation
        pass

    def eat(self):
        # Implementation
        pass

class Robot(Workable):  # ‚úÖ Only implements what it needs
    def work(self):
        # Implementation
        pass
